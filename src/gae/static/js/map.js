// Generated by CoffeeScript 1.3.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  ottb.Map = (function() {

    Map.name = 'Map';

    function Map(selectLinkCallback, removeLinkCallback) {
      this.animateMarkers = __bind(this.animateMarkers, this);
      this.map = new google.maps.Map(document.getElementById("schedule-map"), gMapOptions);
      this.gameMarkers = {};
      this.displayedGames = {};
      this.lastInfoWindow = null;
      this.selectLinkCallback = selectLinkCallback;
      this.setupSelectLinkListener();
      this.removeLinkCallback = removeLinkCallback;
      this.setupRemoveLinkListener();
      this.animateMarkers();
    }

    Map.prototype.addDatePicker = function(datePickerHtml) {
      return this.map.controls[google.maps.ControlPosition.TOP_CENTER].push(datePickerHtml);
    };

    Map.prototype.addItinerary = function(itineraryHtml) {
      return this.map.controls[google.maps.ControlPosition.TOP_RIGHT].push(itineraryHtml);
    };

    Map.prototype.displayGames = function(newGames, gamesAttending) {
      var displayedGame, gameAttending, keepIt, newGame, teamAbbr, _i, _j, _len, _len1, _ref, _results,
        _this = this;
      if (this.lastInfoWindow !== null) {
        this.lastInfoWindow.close();
      }
      this.lastInfoWindow = null;
      for (_i = 0, _len = gamesAttending.length; _i < _len; _i++) {
        gameAttending = gamesAttending[_i];
        this.gameMarkers[gameAttending.home_team_abbr].setOpacity(1);
      }
      _ref = this.displayedGames;
      for (teamAbbr in _ref) {
        if (!__hasProp.call(_ref, teamAbbr)) continue;
        displayedGame = _ref[teamAbbr];
        keepIt = newGames.some(function(newGame) {
          return newGame.home_team_abbr === displayedGame.home_team_abbr;
        }) || this.isAttending(displayedGame, gamesAttending);
        if (!keepIt) {
          this.fadeOutMarker(this.gameMarkers[displayedGame.home_team_abbr]);
          delete this.displayedGames[displayedGame.home_team_abbr];
        }
      }
      _results = [];
      for (_j = 0, _len1 = newGames.length; _j < _len1; _j++) {
        newGame = newGames[_j];
        _results.push((function(newGame) {
          var context, marker, source, template;
          marker = _this.gameMarkers[newGame.home_team_abbr];
          if (!marker) {
            marker = new google.maps.Marker({
              position: new google.maps.LatLng(parseFloat(newGame.lat), parseFloat(newGame.lon)),
              map: _this.map,
              opacity: 0,
              optimized: false,
              opacities: []
            });
          }
          if (!_this.isAttending(newGame, gamesAttending)) {
            marker.setTitle(newGame.away_team_name + ' @ ' + newGame.home_team_name);
            source = $("#info-window").html();
            template = Handlebars.compile(source);
            context = {
              game_id: newGame.id,
              away_team: newGame.away_team_abbr,
              home_team: newGame.home_team_abbr,
              game_time: newGame.game_time,
              is_attending: false
            };
            google.maps.event.clearInstanceListeners(marker);
            google.maps.event.addListener(marker, 'click', function() {
              if (_this.lastInfoWindow !== null) {
                _this.lastInfoWindow.close();
              }
              _this.lastInfoWindow = new google.maps.InfoWindow();
              _this.lastInfoWindow.setContent(template(context));
              _this.lastInfoWindow.open(_this.map, marker);
              return false;
            });
            if (!(_this.displayedGames[newGame.home_team_abbr] != null)) {
              _this.fadeInMarker(marker);
            }
            _this.gameMarkers[newGame.home_team_abbr] = marker;
            return _this.displayedGames[newGame.home_team_abbr] = newGame;
          } else {
            source = $("#info-window").html();
            template = Handlebars.compile(source);
            context = {
              game_id: newGame.id,
              away_team: newGame.away_team_abbr,
              home_team: newGame.home_team_abbr,
              game_time: newGame.game_time,
              is_attending: true
            };
            google.maps.event.clearInstanceListeners(marker);
            return google.maps.event.addListener(marker, 'click', function() {
              if (_this.lastInfoWindow !== null) {
                _this.lastInfoWindow.close();
              }
              _this.lastInfoWindow = new google.maps.InfoWindow();
              _this.lastInfoWindow.setContent(template(context));
              _this.lastInfoWindow.open(_this.map, marker);
              return false;
            });
          }
        })(newGame));
      }
      return _results;
    };

    Map.prototype.isAttending = function(game, gamesAttending) {
      return gamesAttending.some(function(attendedGame) {
        return attendedGame.home_team_abbr === game.home_team_abbr;
      });
    };

    Map.prototype.setupSelectLinkListener = function() {
      var that;
      that = this;
      return $(document).on("click", ".select-game-link a", function(event) {
        if (that.lastInfoWindow !== null) {
          that.lastInfoWindow.close();
        }
        that.selectLinkCallback(this.id);
        return false;
      });
    };

    Map.prototype.setupRemoveLinkListener = function() {
      var that;
      that = this;
      return $(document).on("click", ".remove-game-link a", function(event) {
        if (that.lastInfoWindow !== null) {
          that.lastInfoWindow.close();
        }
        that.removeLinkCallback(this.id);
        return false;
      });
    };

    Map.prototype.fadeInMarker = function(marker) {
      return marker.opacities = marker.opacities.concat([.1, .2, .3, .4, .5, .6]);
    };

    Map.prototype.fadeOutMarker = function(marker) {
      if (marker.opacity > 0) {
        return marker.opacities = marker.opacities.concat([.5, .4, .3, .2, .1, 0]);
      }
    };

    Map.prototype.animateMarkers = function() {
      var aMarker, teamAbbr, _ref,
        _this = this;
      _ref = this.gameMarkers;
      for (teamAbbr in _ref) {
        if (!__hasProp.call(_ref, teamAbbr)) continue;
        aMarker = _ref[teamAbbr];
        if (aMarker.opacities.length > 0) {
          aMarker.setOpacity(aMarker.opacities[0]);
          aMarker.setVisible(aMarker.opacities[0] !== 0);
          aMarker.opacities.shift();
        }
      }
      return setTimeout(function() {
        return _this.animateMarkers();
      }, 50);
    };

    return Map;

  })();

}).call(this);
