// Generated by CoffeeScript 1.3.1
(function() {
  var dateChanged, displayGamesForDate, drawItinerary, formatDate, gCache, gGameMarkers, gItinerary, gMap, gOpeningDay, getInitialMapDate, initMap, setupSelectLinkListener;

  drawItinerary = function(games) {
    var context, game, source, template, _i, _len, _results;
    $("#itineraryDiv").empty();
    _results = [];
    for (_i = 0, _len = games.length; _i < _len; _i++) {
      game = games[_i];
      source = $("#info-window").html();
      template = Handlebars.compile(source);
      context = {
        game_id: game.id,
        away_team: game.away_team_abbr,
        home_team: game.home_team_abbr,
        game_time: game.game_time,
        displaySelectGameLink: false
      };
      $("#itineraryDiv").append(template(context));
      _results.push(null);
    }
    return _results;
  };

  gMap = {};

  gGameMarkers = [];

  gItinerary = new ottb.Itinerary(drawItinerary);

  gCache = new ottb.Cache;

  gOpeningDay = new Date("4/5/2015");

  formatDate = function(date) {
    return date.toJSON().slice(0, 10);
  };

  getInitialMapDate = function() {
    var mapDate, today;
    today = new Date;
    mapDate = today > gOpeningDay ? today : gOpeningDay;
    return mapDate;
  };

  dateChanged = function() {
    return displayGamesForDate(formatDate(new Date($("#datepicker").val())));
  };

  displayGamesForDate = function(date) {
    var aMarker, lastInfoWindow, _i, _len;
    for (_i = 0, _len = gGameMarkers.length; _i < _len; _i++) {
      aMarker = gGameMarkers[_i];
      aMarker.setMap(null);
    }
    gGameMarkers = [];
    lastInfoWindow = null;
    return $.ajax({
      url: 'appdata/games?date=' + date,
      success: function(games) {
        var game, _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = games.length; _j < _len1; _j++) {
          game = games[_j];
          _results.push((function(game) {
            var context, marker, source, template;
            gCache.addGame(game);
            marker = new google.maps.Marker({
              position: new google.maps.LatLng(parseFloat(game.lat), parseFloat(game.lon)),
              title: game.away_team + ' @ ' + game.home_team,
              map: gMap
            });
            source = $("#info-window").html();
            template = Handlebars.compile(source);
            context = {
              game_id: game.id,
              away_team: game.away_team_abbr,
              home_team: game.home_team_abbr,
              game_time: game.game_time,
              displaySelectGameLink: true
            };
            google.maps.event.addListener(marker, 'click', function() {
              if (lastInfoWindow !== null) {
                lastInfoWindow.close();
              }
              lastInfoWindow = new google.maps.InfoWindow();
              lastInfoWindow.setContent(template(context));
              lastInfoWindow.open(gMap, marker);
              return false;
            });
            return gGameMarkers.push(marker);
          })(game));
        }
        return _results;
      },
      error: function(response) {
        return alert('Error retrieving games for the selected date.');
      }
    });
  };

  setupSelectLinkListener = function() {
    return $(document).on("click", ".select-game-link a", function(event) {
      gItinerary.addGame(gCache.getGame(this.id));
      return false;
    });
  };

  initMap = function() {
    var options, source, template;
    setupSelectLinkListener();
    options = {
      center: new google.maps.LatLng(39.8111444, -98.5569364),
      zoom: 4,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      mapTypeControl: false,
      styles: [
        {
          featureType: "all",
          elementType: "labels",
          stylers: [
            {
              visibility: "off"
            }
          ]
        }
      ]
    };
    gMap = new google.maps.Map(document.getElementById("schedule-map"), options);
    source = $("#trip-controls").html();
    template = Handlebars.compile(source);
    gMap.controls[google.maps.ControlPosition.TOP_RIGHT].push($(template())[0]);
    return setTimeout(function() {
      var datepicker;
      datepicker = $("#datepicker");
      datepicker.datepicker();
      datepicker.datepicker("setDate", getInitialMapDate());
      dateChanged();
      datepicker.change(dateChanged);
      return datepicker.keyup(function(event) {
        return false;
      });
    }, 1000);
  };

  $(document).ready(initMap);

}).call(this);
