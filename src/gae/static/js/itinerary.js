// Generated by CoffeeScript 1.3.1
(function() {

  ottb.Itinerary = (function() {

    Itinerary.name = 'Itinerary';

    Itinerary.NUM_SECONDS_IN_DAY = 24 * 60 * 60;

    Itinerary.NUM_SECONDS_IN_HOUR = 60 * 60;

    Itinerary.NUM_SECONDS_IN_MINUTE = 60;

    Itinerary.METERS_IN_MILE = 1609.34;

    function Itinerary(cache) {
      var distanceDurationSource, gameSource, goButtonSource, itinerarySource;
      this.itinerary = new Array;
      this.duration = 0;
      this.distance = 0;
      this.routes = [];
      this.cache = cache;
      this.polygon = void 0;
      itinerarySource = $("#itinerary-ui").html();
      this.itineraryTemplate = Handlebars.compile(itinerarySource);
      distanceDurationSource = $("#itinerary-distance-duration").html();
      this.distanceDurationTemplate = Handlebars.compile(distanceDurationSource);
      goButtonSource = $("#itinerary-go-button").html();
      this.goButtonTemplate = Handlebars.compile(goButtonSource);
      gameSource = $("#itinerary-game").html();
      this.gameTemplate = Handlebars.compile(gameSource);
    }

    Itinerary.prototype.getGames = function() {
      return this.itinerary.slice();
    };

    Itinerary.prototype.addToMap = function(map) {
      return map.addItinerary($(this.itineraryTemplate())[0]);
    };

    Itinerary.prototype.addGame = function(game, map) {
      this.itinerary.push(game);
      this.itinerary.sort(this.sortGameByDay);
      this.calculateTimeAndDistance();
      return this.drawItinerary(map);
    };

    Itinerary.prototype.removeGame = function(gameToDelete, map) {
      var game, i, _i, _len, _ref;
      _ref = this.itinerary;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        game = _ref[i];
        if (game.home_team_abbr === gameToDelete.home_team_abbr) {
          this.itinerary.splice(i, 1);
          break;
        }
      }
      this.calculateTimeAndDistance();
      return this.drawItinerary(map);
    };

    Itinerary.prototype.calculateTimeAndDistance = function() {
      var game, i, prevGame, _i, _len, _ref, _results;
      this.duration = 0;
      this.distance = 0;
      this.routes = [];
      prevGame = null;
      _ref = this.itinerary;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        game = _ref[i];
        if (0 === i) {
          prevGame = game;
          continue;
        }
        this.routes.push(this.cache.getTripRoute(prevGame.home_team_id, game.home_team_id));
        this.duration += this.cache.getTripDuration(prevGame.home_team_id, game.home_team_id);
        this.distance += this.cache.getTripDistance(prevGame.home_team_id, game.home_team_id);
        _results.push(prevGame = game);
      }
      return _results;
    };

    Itinerary.prototype.drawItinerary = function(map) {
      var context, distance, duration, game, prevTeam, _i, _len, _ref, _results;
      $("#itinerary").empty();
      map.drawRoute(this.routes);
      prevTeam = null;
      _ref = this.itinerary;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        game = _ref[_i];
        distance = null;
        if (prevTeam) {
          distance = this.getNumMiles(this.cache.getTripDistance(prevTeam, game.home_team_id));
          duration = this.getTimeString(this.cache.getTripDuration(prevTeam, game.home_team_id));
        }
        context = {
          game_id: game.id,
          away_team: game.away_team_abbr,
          home_team: game.home_team_abbr,
          prev_team: prevTeam,
          distance: distance,
          duration: duration
        };
        $("#itinerary").append(this.gameTemplate(context));
        _results.push(prevTeam = game.home_team_id);
      }
      return _results;
    };

    Itinerary.prototype.sortGameByDay = function(game1, game2) {
      return (game1.game_day > game2.game_day) - (game2.game_day > game1.game_day);
    };

    Itinerary.prototype.getNumMiles = function(numMeters) {
      return Math.round(numMeters / ottb.Itinerary.METERS_IN_MILE).toLocaleString();
    };

    Itinerary.prototype.getTimeString = function(numSeconds) {
      var numDays, numHours, numMinutes, timeString;
      numDays = Math.floor(numSeconds / ottb.Itinerary.NUM_SECONDS_IN_DAY);
      numHours = Math.floor((numSeconds - (numDays * ottb.Itinerary.NUM_SECONDS_IN_DAY)) / ottb.Itinerary.NUM_SECONDS_IN_HOUR);
      numMinutes = Math.round((numSeconds - (numDays * ottb.Itinerary.NUM_SECONDS_IN_DAY) - (numHours * ottb.Itinerary.NUM_SECONDS_IN_HOUR)) / ottb.Itinerary.NUM_SECONDS_IN_MINUTE);
      timeString = "";
      if (numDays > 0) {
        timeString += numDays + (numDays === 1 ? " day, " : " days, ");
      }
      if (numHours > 0) {
        timeString += numHours + (numHours === 1 ? " hour, " : " hours, ");
      }
      if (numMinutes > 0) {
        timeString += numMinutes + (numMinutes === 1 ? " minute, " : " minutes, ");
      }
      timeString = timeString.slice(0, -2);
      return timeString;
    };

    return Itinerary;

  })();

}).call(this);
